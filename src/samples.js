export const samples = {
  abap: 'WRITE \u0027Hello World\u0027.',
  actionscript: 'trace("Hello World")',
  ada: 'with Ada.Text_IO;\nprocedure Hello is\nbegin\n  Ada.Text_IO.Put_Line("Hello World");\nend Hello;',
  apl: '"Hello World"',
  assembly: '; depends on flavor',
  awk: 'BEGIN { print "Hello World" }',
  bash: 'echo "Hello World"',
  basic: 'PRINT "Hello World"',
  bison: '%{\n#include <stdio.h>\n%}\n%%\n%%\nint main(){ printf("Hello World\\n"); }',
  boo: 'print("Hello World")',
  c: '#include <stdio.h>\nint main(){ printf("Hello World\\n"); return 0; }',
  'c#': 'using System; class Program { static void Main() { Console.WriteLine("Hello World"); } }',
  'c++': '#include <iostream>\nint main(){ std::cout << "Hello World"; }',
  clojure: '(println "Hello World")',
  cobol: 'IDENTIFICATION DIVISION. PROGRAM-ID. HELLO. PROCEDURE DIVISION. DISPLAY "Hello World". STOP RUN.',
  coffeescript: 'console.log "Hello World"',
  d: 'import std.stdio; void main(){ writeln("Hello World"); }',
  dart: 'void main() { print("Hello World"); }',
  delphi: 'begin writeln("Hello World"); end.',
  eiffel: 'class HELLO create make feature make do print ("Hello World") end end',
  elixir: 'IO.puts "Hello World"',
  elm: 'main = putStrLn "Hello World"',
  erlang: 'io:fwrite("Hello World~n").',
  'f#': 'printfn "Hello World"',
  fortran: 'program hello\nprint *, "Hello World"\nend program hello',
  go: 'package main\nimport "fmt"\nfunc main(){ fmt.Println("Hello World") }',
  groovy: 'println "Hello World"',
  hack: 'echo "Hello World";',
  haskell: 'main = putStrLn "Hello World"',
  java: 'public class HelloWorld { public static void main(String[] args){ System.out.println("Hello World"); } }',
  javascript: 'console.log("Hello World")',
  kotlin: 'fun main(){ println("Hello World") }',
  lua: 'print("Hello World")',
  matlab: 'disp("Hello World")',
  objectivec: '#import <stdio.h>\nint main(){ printf("Hello World\\n"); return 0; }',
  pascal: 'program Hello; begin writeln("Hello World"); end.',
  perl: 'print "Hello World\\n";',
  php: '<?php echo "Hello World"; ?>',
  python: 'print("Hello World")',
  r: 'print("Hello World")',
  ruby: 'puts "Hello World"',
  rust: 'fn main(){ println!("Hello World"); }',
  scala: 'object HelloWorld extends App { println("Hello World") }',
  swift: 'print("Hello World")',
  typescript: 'console.log("Hello World")',
  'visual basic': 'Module Hello\nSub Main()\nSystem.Console.WriteLine("Hello World")\nEnd Sub\nEnd Module',
  wasm: '(module (func (export "_start") (nop))) ; placeholder',
  zig: 'const std = @import("std"); pub fn main() !void { std.debug.print("Hello World\\n", .{}); }',
  abc: 'WRITE "Hello World"',
  agda: 'module Main where\nopen import IO\nmain = putStrLn "Hello World"',
  algol: 'begin\n  print("Hello World")\nend.',
  alice: 'fun main() = print("Hello World")',
  bc: 'print "Hello World"',
  beanshell: 'print("Hello World");',
  befunge: '"Hello World" @',
  chapel: 'writeln("Hello World");',
  chill: 'PROC(HELLO) BEGIN PRINT("Hello World"); END;',
  'common lisp': '(format t "Hello World~%")',
  crystal: 'puts "Hello World"',
  dibol: 'DISPLAY "Hello World"',
  dylan: 'format-out("Hello World\\n")',
  e: 'println("Hello World")',
  'emacs lisp': '(message "Hello World")',
  forth: '." Hello World"',
  icon: 'procedure main() write("Hello World") end',
  idl: 'PROGRAM Hello\n PRINT, "Hello World"\nEND',
  io: 'writeln("Hello World")',
  j: 'echo ''Hello World''',
  julia: 'println("Hello World")',
  labview: '-- graphical language snippet',
  'ladder logic': '-- PLC ladder example',
  logo: 'print "Hello World"',
  lisp: '(print "Hello World")',
  'modula-2': 'MODULE Hello; IMPORT InOut; BEGIN InOut.WriteString("Hello World"); END Hello.',
  nim: 'echo "Hello World"',
  npl: 'DISPLAY "Hello World"',
  ocaml: 'print_endline "Hello World"',
  opencl: '__kernel void hello() { }',
  'pl/i': 'put list("Hello World");',
  postscript: '(/Hello World) show',
  prolog: ':- initialization(write(\'Hello World\')).',
  'q#': 'namespace Hello { operation Main() : Unit {} }',
  racket: '#lang racket\n(display "Hello World")',
  raku: 'say "Hello World"',
  ring: 'see "Hello World"',
  sas: 'data _null_; put "Hello World"; run;',
  scheme: '(display "Hello World")',
  scratch: '// blocks-based language',
  smalltalk: 'Transcript show: "Hello World".',
  solidity: 'pragma solidity ^0.8.0; contract Hello { }',
  sql: 'SELECT "Hello World";',
  tcl: 'puts "Hello World"',
  vhdl: 'entity Hello is end; architecture bhv of Hello is begin end;',
  'vim script': 'echo "Hello World"',
  'x++': 'info("Hello World");',
  yaml: '# Hello World in YAML\nmessage: Hello World'
};
